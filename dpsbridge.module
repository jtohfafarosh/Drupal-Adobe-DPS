<?php
/**
 * @file
 * Module provides funcationality to generate Adobe DPS Folios from Drupal.
 */

/**
 * Implements hook_init().
 */
function dpsbridge_init() {
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.form');
  drupal_add_library('system', 'ui.dialog');
  drupal_add_library('system', 'ui.tabs');
  drupal_add_library('system', 'ui.sortable');

  module_load_include('inc', 'dpsbridge', 'dpsbridge_helper');
  module_load_include('inc', 'dpsbridge', 'dpsbridge_style_bootstrap');
  module_load_include('inc', 'dpsbridge', 'dpsbridge_style_foundation');
}

/**
 * Implements hook_menu().
 */
function dpsbridge_menu() {
  $items = array();
  $items['admin/config/content/dpsbridge'] = array(
    'title' => 'DPS Bridge Configuration',
    'description' => "Manage DPSBridge module settings",
    'page callback' => 'dpsbridge_credential_page',
    'access arguments' => array('administer dpsbridge'),
    'file' => 'dpsbridge.admin.inc',
    'weight' => -100,
  );
  $items['admin/config/content/fpmanage'] = array(
    'title' => 'Folio Management',
    'description' => "Manage Folios created by the DPS Bridge module.",
    'page callback' => 'dpsbridge_fpmanage_page',
    'access arguments' => array('manage dpsbridge folio'),
    'file' => 'dpsbridge.admin.inc',
    'weight' => -9,
  );
  $items['admin/config/content/fpselect'] = array(
    'title' => 'Folio Article Selection',
    'description' => "Create Folio by selected content.",
    'page callback' => 'dpsbridge_fpselect_page',
    'access arguments' => array('folio_article_permission'),
    'file' => 'dpsbridge.admin.inc',
    'weight' => -8,
  );
  $items['dpsbridge/dps/credentials/add'] = array(
    'title' => 'Updates the Adobe DPS Credentials',
    'page callback' => 'dpsbridge_dps_credentials_add',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/dps/credentials/pull'] = array(
    'title' => 'Updates the Adobe DPS Credentials',
    'page callback' => 'dpsbridge_dps_credentials_pull',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/add'] = array(
    'title' => 'Adds new folio (node)',
    'page callback' => 'dpsbridge_folio_add',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/append'] = array(
    'title' => 'Append articles to a folio (node)',
    'page callback' => 'dpsbridge_folio_append',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/clean-up'] = array(
    'title' => 'Deletes the generated HTML Article folders and folio files',
    'page callback' => 'dpsbridge_folio_cleanup',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/clone-node'] = array(
    'title' => 'Creates a duplicate of the targeted folio node',
    'page callback' => 'dpsbridge_folio_clone_node',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/delete-node'] = array(
    'title' => 'Delete targeted folio node',
    'page callback' => 'dpsbridge_folio_delete_node',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/generate-folios'] = array(
    'title' => 'Create folio files from the generated HTML Articles',
    'page callback' => 'dpsbridge_folio_generate_folios',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/generate-HTML'] = array(
    'title' => 'Create HTML Articles from the list of Articles',
    'page callback' => 'dpsbridge_folio_generate_html',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/generate-selected-HTML'] = array(
    'title' => 'Create HTML Articles from the list of Articles',
    'page callback' => 'dpsbridge_folio_generate_selected_html',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/download-selected'] = array(
    'title' => 'Download selected file (HTML article zip file)',
    'page callback' => 'dpsbridge_folio_download_selected',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/pull-accounts'] = array(
    'title' => 'Pulls accounts associated with the folio node',
    'page callback' => 'dpsbridge_folio_pull_accounts',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/pull-article'] = array(
    'title' => 'Pulls content regarding an article',
    'page callback' => 'dpsbridge_folio_pull_article',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/pull-content'] = array(
    'title' => 'Pulls content regarding a folio',
    'page callback' => 'dpsbridge_folio_pull_content',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/preview-article'] = array(
    'title' => 'Previews an article',
    'page callback' => 'dpsbridge_folio_article_preview',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/preview-delete'] = array(
    'title' => 'Deletes the temperary preview article',
    'page callback' => 'dpsbridge_folio_article_delete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/update'] = array(
    'title' => 'Updates a folio (node)',
    'page callback' => 'dpsbridge_folio_update',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/update-status'] = array(
    'title' => 'Stores the folio ID (Folio Producer) in the folio (node)',
    'page callback' => 'dpsbridge_folio_update_status',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/update-timestamp'] = array(
    'title' => 'Updates the upload timestamp',
    'page callback' => 'dpsbridge_folio_update_timestamp',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/folio/upload'] = array(
    'title' => 'Uploads the folio to Folio Producer (node)',
    'page callback' => 'dpsbridge_folio_upload',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/img/upload'] = array(
    'title' => 'Saves the selected image(s)',
    'page callback' => 'dpsbridge_img_upload',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/stylesheet/read'] = array(
    'title' => 'Reads the available local stylesheets',
    'page callback' => 'dpsbridge_stylesheet_reader',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/stylesheet/delete'] = array(
    'title' => 'Delete stylesheets from the server',
    'page callback' => 'dpsbridge_stylesheet_delete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/stylesheet/upload'] = array(
    'title' => 'Upload stylesheets to the server',
    'page callback' => 'dpsbridge_stylesheet_upload',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  $items['dpsbridge/views/access-denied'] = array(
    'title' => 'DPSBridge Config page',
    'page callback' => 'dpsbridge_views_access_denied',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function dpsbridge_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if ($form['#id'] == 'views-exposed-form-folio-article-selection-page') {
      // Use current page url instead of the one from view page.
      $form['#action'] = url($_GET['q']);
    }
  }
}

/**
 * Implements Add New Articles To Folio Form.
 */
function dpsbridge_add_new_articles_to_folio_form($form, &$form_state) {
  $form = array();
  $form['folio_info'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['folio_info']['fname'] = array(
    '#type' => 'textfield',
    '#title' => t('Folio Name'),
    '#size' => 20,
    '#required' => TRUE,
    '#attributes' => array('id' => 'fname', 'placeholder' => t('Folio Name')),
  );
  $form['folio_info']['pname'] = array(
    '#type' => 'textfield',
    '#title' => t('Publication Name'),
    '#size' => 20,
    '#required' => TRUE,
    '#attributes' => array('id' => 'pname', 'placeholder' => t('Publication Name')),
  );
  $form['folio_info']['fnumber'] = array(
    '#type' => 'textfield',
    '#title' => t('Folio Number'),
    '#size' => 20,
    '#required' => TRUE,
    '#attributes' => array('id' => 'fnumber', 'placeholder' => t('Folio Number')),
  );
  $form['folio_info']['pdate'] = array(
    '#type' => 'textfield',
    '#title' => t('Publication Date'),
    '#default_value' => date('Y-m-d'),
    '#size' => 20,
    '#required' => TRUE,
    '#attributes' => array('id' => 'pdate'),
    '#theme' => array('dpsbridge_date'),
  );
  return $form;
}

/**
 * Implements hook_entity_info_alter().
 */
function dpsbridge_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['dps'] = array(
    'label' => t('DPS'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['dps_toc'] = array(
    'label' => t('DPS Toc'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements Add Existing Articles To Folio Form.
 */
function dpsbridge_add_existing_articles_to_folio_form($form, &$form_state) {
  $form = array();
  $form['folio_info'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $fp_nodes_all = node_load_multiple(array(), array('type' => 'folios'));
  $options = array();
  foreach ($fp_nodes_all as $fp_node) {
    $options[$fp_node->nid] = $fp_node->title;
  }
  $form['folio_info']['fid'] = array(
    '#type' => 'select',
    '#title' => t('Folio Name'),
    '#options' => $options,
    '#required' => TRUE,
    '#attributes' => array('id' => 'fid'),
  );
  return $form;
}

/**
 * Implements Edit Existing Folio Form.
 */
function dpsbridge_edit_existing_folio_form($form, &$form_state) {
  $form = array();
  $form['folio_ui_fname'] = array(
    '#type' => 'textfield',
    '#title' => t('Folio Name'),
    '#size' => 20,
    '#required' => TRUE,
    '#attributes' => array('id' => 'folio-ui-fname', 'placeholder' => t('Folio Name')),
  );
  $form['folio_ui_pname'] = array(
    '#type' => 'textfield',
    '#title' => t('Publication Name'),
    '#size' => 20,
    '#required' => TRUE,
    '#attributes' => array('id' => 'folio-ui-pname', 'placeholder' => t('Publication Name')),
  );
  $form['folio_ui_fnumber'] = array(
    '#type' => 'textfield',
    '#title' => t('Folio Number'),
    '#size' => 20,
    '#required' => TRUE,
    '#attributes' => array('id' => 'folio-ui-fnumber', 'placeholder' => t('Folio Number')),
  );
  $form['folio_ui_pdate'] = array(
    '#type' => 'textfield',
    '#title' => t('Publication Date'),
    '#default_value' => date('Y-m-d'),
    '#size' => 20,
    '#required' => TRUE,
    '#attributes' => array('id' => 'folio-ui-pdate'),
    '#theme' => array('dpsbridge_date'),
  );
  $form['folio_ui_fdesc'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#rows' => 4,
    '#required' => TRUE,
    '#attributes' => array('id' => 'folio-ui-fdesc', 'placeholder' => t('Folio Description')),
  );
  $form['accounts'] = array(
    '#type' => 'select',
    '#title' => t('DPS Account'),
    '#options' => array(
      'amazon' => t('Amazon'),
      'android' => t('Android'),
      'apple' => t('Apple'),
    ),
    '#required' => TRUE,
    '#attributes' => array('id' => 'accounts'),
  );
  $form['folio_ui_filter'] = array(
    '#type' => 'textfield',
    '#title' => t('Library Filter'),
    '#size' => 20,
    '#required' => TRUE,
    '#attributes' => array('id' => 'folio-ui-filter', 'placeholder' => t('Library Filter')),
  );
  // HTML Resources Select List is Update by jQuery.
  $form['pubcss'] = array(
    '#type' => 'select',
    '#title' => t('HTML Resources'),
    '#options' => array(),
    '#required' => TRUE,
    '#attributes' => array('id' => 'pubcss'),
  );
  // Resolution Select List is Update by jQuery.
  $form['dimension'] = array(
    '#type' => 'select',
    '#title' => t('Resolution'),
    '#options' => array(),
    '#required' => TRUE,
    '#attributes' => array('id' => 'dimension'),
  );
  $form['folio_ui_fversion'] = array(
    '#type' => 'select',
    '#title' => t('Viewer Version'),
    '#options' => array(
      '24.0.0' => t('24'),
      '25.0.0' => t('25'),
      '26.0.0' => t('26'),
      '27.0.0' => t('27'),
    ),
    '#default_value' => '27.0.0',
    '#required' => TRUE,
    '#attributes' => array('id' => 'folio-ui-fversion'),
  );
  $form['folio_ui_orientation'] = array(
    '#type' => 'select',
    '#title' => t('Folio Orientation'),
    '#options' => array(
      'Landscape' => t('Horizontal Orientation'),
      'Portrait' => t('Vertical Orientation'),
      'Always' => t('Both Orientations'),
    ),
    '#default_value' => 'Landscape',
    '#required' => TRUE,
    '#attributes' => array('id' => 'folio-ui-orientation'),
  );
  $form['folio_ui_generator'] = array(
    '#type' => 'select',
    '#title' => t('TOC & Cover'),
    '#options' => array(
      'Generate ToC' => t('Generate ToC Only'),
      'Generate Cover' => t('Generate Cover Only'),
      'Generate Both' => t('Generate Both'),
      'Generate None' => t('Generate None'),
    ),
    '#required' => TRUE,
    '#attributes' => array('id' => 'folio-ui-generator'),
  );
  return $form;
}

/**
 * Implements Edit Existing Folio Form.
 */
function dpsbridge_module_config_form($form, &$form_state) {
  $form = array();
  $form['apikey'] = array(
    '#type' => 'password',
    '#title' => t('API Key'),
    '#size' => 30,
    '#required' => TRUE,
    '#attributes' => array(
      'id' => 'apikey',
      'required' => '',
      'placeholder' => t('API Key'),
    ),
  );
  $form['apisec'] = array(
    '#type' => 'password',
    '#title' => t('API Secret'),
    '#size' => 30,
    '#required' => TRUE,
    '#attributes' => array(
      'id' => 'apisec',
      'required' => '',
      'placeholder' => t('API Secret'),
    ),
  );

  $form['add_stylesheet'] = array(
    '#markup' => '<button type="button" onclick="javascript:jQuery(\'#dialog-option-stylesheet-add\').dialog(\'open\')">Add Stylesheet</button>',
  );
  $form['delete_stylesheet'] = array(
    '#markup' => '<button type="button" onclick="javascript:jQuery(\'#dialog-option-stylesheet-delete\').dialog(\'open\')">Delete Stylesheet</button>',
  );
  $form['download_stylesheet'] = array(
    '#markup' => '<button type="button" onclick="javascript:jQuery(\'#dialog-option-stylesheet-download\').dialog(\'open\')">Download Stylesheet</button>',
  );

  $form['amazon_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Folio Producer User ID'),
    '#size' => 30,
    '#attributes' => array(
      'id' => 'amazon_id',
      'required' => '',
      'placeholder' => t('User ID (E-mail)'),
    ),
  );
  $form['amazon_pass'] = array(
    '#type' => 'password',
    '#title' => t('Folio Producer Password'),
    '#size' => 30,
    '#attributes' => array(
      'id' => 'amazon_pass',
      'required' => '',
      'placeholder' => t('User Password'),
    ),
  );
  $form['amazon_dimension'] = array(
    '#type' => 'select',
    '#title' => t('Available Dimensions'),
    '#attributes' => array(
      'id' => 'amazon_dimension',
      'multiple' => '',
      'disabled' => '',
    ),
    '#options' => array(),
  );

  $form['android_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Folio Producer User ID'),
    '#size' => 30,
    '#attributes' => array(
      'id' => 'android_id',
      'required' => '',
      'placeholder' => t('User ID (E-mail)'),
    ),
  );
  $form['android_pass'] = array(
    '#type' => 'password',
    '#title' => t('Folio Producer Password'),
    '#size' => 30,
    '#attributes' => array(
      'id' => 'android_pass',
      'required' => '',
      'placeholder' => t('User Password'),
    ),
  );
  $form['android_dimension'] = array(
    '#type' => 'select',
    '#title' => t('Available Dimensions'),
    '#attributes' => array(
      'id' => 'android_dimension',
      'multiple' => '',
      'disabled' => '',
    ),
    '#options' => array(),
  );

  $form['apple_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Folio Producer User ID'),
    '#size' => 30,
    '#attributes' => array(
      'id' => 'apple_id',
      'required' => '',
      'placeholder' => t('User ID (E-mail)'),
    ),
  );
  $form['apple_pass'] = array(
    '#type' => 'password',
    '#title' => t('Folio Producer Password'),
    '#size' => 30,
    '#attributes' => array(
      'id' => 'apple_pass',
      'required' => '',
      'placeholder' => t('User Password'),
    ),
  );
  $form['apple_dimension'] = array(
    '#type' => 'select',
    '#title' => t('Available Dimensions'),
    '#attributes' => array(
      'id' => 'apple_dimension',
      'multiple' => '',
      'disabled' => '',
    ),
    '#options' => array(),
  );

  $form['test_connection'] = array(
    '#markup' => '<button type="button" onclick="javascript:jQuery(\'#dialog-option-connectivity\').dialog(\'open\')">Test Connection</button>',
  );
  $form['add_dimensions'] = array(
    '#markup' => '<button type="button" onclick="javascript:jQuery(\'#dialog-option-dimension-add\').dialog(\'open\')">Add Dimensions</button>',
  );
  $form['delete_dimensions'] = array(
    '#markup' => '<button type="button" onclick="javascript:jQuery(\'#dialog-option-dimension-delete\').dialog(\'open\')">Delete Dimensions</button>',
  );
  $form['save'] = array(
    '#markup' => '<button type="button" onclick="javascript:dps_credentials()">Save</button>',
  );
  $form['cancel'] = array(
    '#markup' => '<button type="button" onclick="location.href=\'/admin/config/content/fpselect\'">Cancel</button>',
  );

  return $form;
}

/**
 * Implements Image Form.
 */
function dpsbridge_image_form($form, &$form_state) {
  global $base_url;
  $form = array();
  $form['#action'] = $base_url . '/dpsbridge/img/upload';
  $form['#attributes'] = array(
    'enctype' => 'multipart/form-data',
    'id' => 'image-form',
  );
  $form['fname'] = array(
    '#type' => 'hidden',
    '#attributes' => array('id' => 'image-ui-fname'),
  );
  $form['fid'] = array(
    '#type' => 'hidden',
    '#attributes' => array('id' => 'image-ui-fid'),
  );
  $form['portrait'] = array(
    '#type' => 'file',
    '#attributes' => array(
      'name' => 'portrait',
      'id' => 'portrait-file',
      'accept' => 'image/*',
    ),
  );
  $form['landscape'] = array(
    '#type' => 'file',
    '#attributes' => array(
      'name' => 'landscape',
      'id' => 'landscape-file',
      'accept' => 'image/*',
    ),
  );
  return $form;
}

/**
 * Create/update the Folio Producer credentials in the database.
 */
function dpsbridge_dps_credentials_add() {
  // Folio Producer API Key.
  $apikey = isset($_POST['apikey']) ? $_POST['apikey'] : '';
  // Folio Producer API Secret.
  $apisec = isset($_POST['apisec']) ? $_POST['apisec'] : '';
  // Folio Producer Amazon Login.
  $amazon_id  = isset($_POST['amazon_id']) ? $_POST['amazon_id'] : '';
  // Folio Producer Amazon Login Password.
  $amazon_pass  = isset($_POST['amazon_pass']) ? $_POST['amazon_pass'] : '';
  // Folio Producer Amazon Target Dimensions.
  $amazon_dimension = isset($_POST['amazon_dimension']) ? $_POST['amazon_dimension'] : '';
  // Folio Producer Android Login.
  $android_id = isset($_POST['android_id']) ? $_POST['android_id'] : '';
  // Folio Producer Android Login Password.
  $android_pass = isset($_POST['android_pass']) ? $_POST['android_pass'] : '';
  // Folio Producer Android Target Dimensions.
  $android_dimension  = isset($_POST['android_dimension']) ? $_POST['android_dimension'] : '';
  // Folio Producer Apple Login.
  $apple_id = isset($_POST['apple_id']) ? $_POST['apple_id'] : '';
  // Folio Producer Apple Login Password.
  $apple_pass = isset($_POST['apple_pass']) ? $_POST['apple_pass'] : '';
  // Folio Producer Apple Target Dimensions.
  $apple_dimension  = isset($_POST['apple_dimension']) ? $_POST['apple_dimension'] : '';
  // Predefined ID number for each of the account types.
  $amazon_user  = '341';
  $android_user = '342';
  $apple_user = '343';
  $message  = 'ok';
  // Calls helper method to create/update each of the account types.
  dpsbridge_helper_credential_update($amazon_user, $amazon_id, $amazon_pass, $amazon_dimension, $apikey, $apisec);
  dpsbridge_helper_credential_update($android_user, $android_id, $android_pass, $android_dimension, $apikey, $apisec);
  dpsbridge_helper_credential_update($apple_user, $apple_id, $apple_pass, $apple_dimension, $apikey, $apisec);

  drupal_json_output($message);
  drupal_exit();
}

/**
 * Pulls the stored Folio Producer credentials from the database.
 */
function dpsbridge_dps_credentials_pull() {
  // Loads each respective users.
  $amazon    = user_load('341');
  $android   = user_load('342');
  $apple     = user_load('343');
  $container = array();

  $container['amazon']['id']  = isset($amazon->name) ? $amazon->name : '';
  $container['amazon']['pass']  = isset($amazon->mail) ? $amazon->mail : '';
  $amazon_dimension = isset($amazon->theme) ? $amazon->theme : '960 x 640,';
  $container['amazon']['dimension'] = explode(',', $amazon_dimension);

  $container['android']['id'] = isset($android->name) ? $android->name : '';
  $container['android']['pass'] = isset($android->mail) ? $android->mail : '';
  $android_dimension  = isset($android->theme) ? $android->theme : '960 x 640,';
  $container['android']['dimension']  = explode(',', $android_dimension);

  $container['apple']['id'] = isset($apple->name) ? $apple->name : '';
  $container['apple']['pass'] = isset($apple->mail) ? $apple->mail : '';
  $apple_dimension  = isset($apple->theme) ? $apple->theme : '480 x 320,1024 x 768,1136 x 640,2048 x 1536,';
  $container['apple']['dimension']  = explode(',', $apple_dimension);

  // Loads the API Key and Secret
  // (each account, if exist, should hold the same API key and secret).
  if (!empty($amazon) && $amazon->signature && $amazon->signature_format) {
    $apikey = $amazon->signature;
    $apisec = $amazon->signature_format;
  }
  elseif (!empty($android) && $android->signature && $android->signature_format) {
    $apikey = $android->signature;
    $apisec = $android->signature_format;
  }
  elseif (!empty($apple) && $apple->signature && $apple->signature_format) {
    $apikey = $apple->signature;
    $apisec = $apple->signature_format;
  }
  $container['apikey'] = $apikey;
  $container['apisec'] = $apisec;
  drupal_json_output($container);
  drupal_exit();
}

/**
 * Creates a new folio node in the database with the given folio metadata.
 */
function dpsbridge_folio_add() {
  // Folio Name.
  $fname    = isset($_POST['fname']) ? $_POST['fname'] : '';
  // Folio Number.
  $fnumber  = isset($_POST['fnumber']) ? $_POST['fnumber'] : '';
  // Folio Publication Name.
  $pname    = isset($_POST['pname']) ? $_POST['pname'] : '';
  // Folio Publication Date.
  $pdate    = isset($_POST['pdate']) ? $_POST['pdate'] : '';
  // Articles within the Folio node.
  $articles = isset($_POST['articles']) ? $_POST['articles'] : '';
  $message  = 'ok';
  // If any of the above POST request are not met.
  if (!$fname || !$pname || !$fnumber || !$pdate || !$articles) {
    $message = '[Error] Missing folio name, publication name, folio number, publication date, and/or list of articles!';
  }
  else {
    $lang = LANGUAGE_NONE;
    // Creates the new node.
    $folio = new stdClass();
    $folio->uid = 1;
    $folio->type = 'folios';
    $folio->language = $lang;
    $folio->title = $fname;
    $folio->status = 1;
    $folio->promote = 0;
    $folio->sticky = 0;
    $folio->created = TIMESTAMP;
    $folio->field_folio_product_id          = array($lang => array(array('value' => '')));
    $folio->field_folio_publication_name    = array($lang => array(array('value' => $pname)));
    $folio->field_folio_number              = array($lang => array(array('value' => $fnumber)));
    $folio->field_folio_description         = array($lang => array(array('value' => '')));
    $folio->field_folio_viewer_version      = array($lang => array(array('value' => '27.0.0')));
    $folio->field_folio_producer_accounts   = array($lang => array(array('value' => 'apple')));
    $folio->field_folio_status              = array($lang => array(array('value' => 'Not Uploaded')));
    $folio->field_folio_sync_status         = array($lang => array(array('value' => 'Not Sync')));
    $folio->field_folio_producer_timestamp  = array($lang => array(array('value' => '')));
    $folio->field_folio_dimension           = array($lang => array(array('value' => '1024 x 768')));
    $folio->field_folio_orientation         = array($lang => array(array('value' => 'Always')));
    $folio->field_folio_publication_css     = array($lang => array(array('value' => 'Foundation')));
    $folio->field_folio_published_date      = array($lang => array(array('value' => $pdate)));
    $folio->field_folio_toc                 = array($lang => array(array('value' => 'Generated')));
    $folio->field_folio_toc_layout          = array($lang => array(array('value' => 'Foundation')));
    $folio->field_folio_auto_generate       = array($lang => array(array('value' => 'Generate Both')));
    $folio->field_folio_ads_filter          = array($lang => array(array('value' => '')));
    $folio->field_folio_library_filter      = array($lang => array(array('value' => '')));
    $folio->field_folio_landscape_url       = array($lang => array(array('value' => '')));
    $folio->field_folio_portrait_url        = array($lang => array(array('value' => '')));
    $folio->field_folio_producer_article_id = array($lang => array(array('value' => '')));
    node_save_action($folio);
    // Calls helper method to update
    // folio-to-articles and articles-to-folio references.
    dpsbridge_helper_folio_append($folio->nid, $articles);
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Appends the given list of articles to an existing folio node.
 */
function dpsbridge_folio_append() {
  // Folio node id.
  $fid      = isset($_POST['fid']) ? $_POST['fid'] : '';
  // Articles within the Folio node.
  $articles = isset($_POST['articles']) ? $_POST['articles'] : '';
  $message  = 'ok';
  // If any of the above POST request are not met.
  if (!$fid || !$articles) {
    $message = '[Error] Missing folio node ID and/or list of articles!';
  }
  else {
    // Calls helper method to append the articles to an existing folio node.
    dpsbridge_helper_folio_append($fid, $articles);
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Remove the generated HTML article folders and folio files.
 *
 * With the given list of file names.
 */
function dpsbridge_folio_cleanup() {
  $current_dir = variable_get('file_public_path', conf_path() . '/files') . '/dpsbridge';
  // List of file names, used to generate HTML Articles and .folio files.
  $filenames = isset($_POST['filenames']) ? $_POST['filenames'] : '';
  $message  = 'ok';
  if (!$filenames) {
    $message = '[Error] Missing array containing file metadata!';
  }
  else {
    for ($i = 0; $i < count($filenames); $i++) {
      $file = dpsbridge_helper_format_title($filenames[$i]);
      unlink($current_dir . '/folio/' . $file . '.folio');
      dpsbridge_helper_rrmdir($current_dir . '/html/' . $file);
    }
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Given the folio node ID, pull the folio node content.
 *
 * And reset the NID, VID, folio ID, upload status, and non-Drupal articles ID
 */
function dpsbridge_folio_clone_node() {
  // @param string $fid ..folio node ID.
  $fid = isset($_POST['fid']) ? $_POST['fid'] : '';
  $message = 'ok';
  if (!$fid) {
    $message = '[Error] Missing folio node ID!';
  }
  else {
    $folio = node_load($fid);
    unset($folio->nid);
    unset($folio->vid);
    $folio->title = 'Clone ' . $folio->title;
    $folio->field_folio_product_id[LANGUAGE_NONE][0]['value'] = '';
    $folio->field_folio_status[LANGUAGE_NONE][0]['value'] = 'Not uploaded';
    $folio->field_folio_sync_status[LANGUAGE_NONE][0]['value'] = 'Not Sync';
    $folio->field_folio_producer_article_id[LANGUAGE_NONE][0]['value'] = '';
    $reference_length = count($folio->field_folio_reference[LANGUAGE_NONE]);
    for ($i = 0; $i < $reference_length; $i++) {
      if ($folio->field_folio_reference[LANGUAGE_NONE][$i]['target_id'] == $fid) {
        unset($folio->field_folio_reference[LANGUAGE_NONE][$i]);
      }
    }
    node_save($folio);
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Given the folio node ID, delete the folio node from the database.
 */
function dpsbridge_folio_delete_node() {
  // @param string $fid ..folio node ID.
  $fid = isset($_POST['fid']) ? $_POST['fid'] : '';
  $message = 'ok';
  if (!$fid) {
    $message = '[Error] Missing folio node ID!';
  }
  else {
    node_delete($fid);
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Create a temperary HTML Article to preview.
 */
function dpsbridge_folio_article_preview() {
  // @param string $fid .......folio node ID.
  // @param array  $articles ..articles within the folio node.
  $preview_id = isset($_POST['previewID']) ? $_POST['previewID'] : '';
  $pname     = isset($_POST['pname']) ? $_POST['pname'] : '';
  $pubcss    = isset($_POST['pubcss']) ? $_POST['pubcss'] : '';
  $output    = array('message' => 'ok');
  // If any of the above POST request are not met.
  if (!$preview_id || !$pname || !$pubcss) {
    $output['message'] = '[Error] Missing Article node ID, Publication Name, or Publication Stylesheet!';
  }
  else {
    $article_node  = dpsbridge_helper_pull_node($preview_id);
    $publication  = $pname;
    $title  = isset($article_node['title']) ? $article_node['title'] : '';
    $author = isset($article_node['author']) ? $article_node['author'] : '';
    $kicker = isset($article_node['kicker']) ? $article_node['kicker'] : '';
    $body = isset($article_node['body']) ? $article_node['body'] : '';
    $images = isset($article_node['image']) ? $article_node['image'] : '';
    $videos = isset($article_node['video']) ? $article_node['video'] : '';
    // Unused Variable $toc  = '';.
    // Fields from dps node view.
    $ds_content = $article_node['ds_content'];
    // Create the directory and its default files.
    dpsbridge_helper_create_dir(dpsbridge_helper_format_title($title));
    // Unzip the selected stylesheet for preview.
    // Removed variable from function because pareview complained.
    // Removed variable $result = dpsbridge_helper_extract_stylesheet($pubcss);.
    dpsbridge_helper_extract_stylesheet($pubcss);
    // Apply the stylesheet framework for preview.
    // Is derivative of Bootstrap framework?
    if (strpos($pubcss, 'Bootstrap') !== FALSE) {
      dpsbridge_helper_style_bootstrap($publication, $title, $author, $kicker, $body, $images, $videos, $ds_content);
    }
    // Is derivative of Foundation framework?
    elseif (strpos($pubcss, 'Foundation') !== FALSE) {
      dpsbridge_helper_style_foundation($publication, $title, $author, $kicker, $body, $images, $videos, $ds_content);
    }
    $output['title'] = $title;
  }
  drupal_json_output($output);
  drupal_exit();
}

/**
 * Delete the targeted HTML Article.
 *
 * Which was created temperary for previewing purposes.
 */
function dpsbridge_folio_article_delete() {
  // @param string $filename ..article name, used to delete temp HTML Article.
  $filename  = isset($_POST['filename']) ? $_POST['filename'] : '';
  $message   = 'ok';
  // If any of the above POST request are not met.
  if (!$filename) {
    $message = '[Error] Missing article or stylsesheet name!';
  }
  else {
    $directory = drupal_get_path("module", "dpsbridge") . '/html/';
    // Calls helper to recursively remove the generated HTML article folder.
    dpsbridge_helper_rrmdir($directory . $filename);
    // Calls helper to recursively remove the unzipped HTML resources folder.
    dpsbridge_helper_rrmdir($directory . 'HTMLResources');
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Create .folio files from the list of article names.
 */
function dpsbridge_folio_generate_folios() {
  // @param array $filenames ..List of file names.
  $filenames = isset($_POST['filenames']) ? $_POST['filenames'] : '';
  $message   = 'ok';
  if (!$filenames) {
    $message = '[Error] Missing the list of file names!';
  }
  else {
    for ($i = 0; $i < count($filenames); $i++) {
      if ($filenames[$i] == '') {
        continue;
      }
      // Locations of targeted HTML article folder to designated .folio file.
      $filename    = dpsbridge_helper_format_title($filenames[$i]);
      $directory   = variable_get('file_public_path', conf_path() . '/files') . '/dpsbridge';
      $source      = $directory . '/html/' . $filename;
      $destination = $directory . '/folio/' . $filename . ".folio";
      // Commands to zip up the HTML article folder.
      $zip_mtype = "zip -r -j " . $destination . " " . $source . "/mimetype";
      $zip_xml   = "zip -r -j " . $destination . " " . $source . "/Folio.xml";
      $zip_rest  = "zip -r -j " . $destination . " " . $source . "/*";
      // Linux built-in zipper.
      exec($zip_mtype);
      exec($zip_xml);
      exec($zip_rest);
    }
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Create HTML Articles from the articles within the given folio node.
 */
function dpsbridge_folio_generate_html() {
  // @param string $folio_node_id ..folio node ID.
  $folio_node_id = isset($_POST['folioNodeID']) ? $_POST['folioNodeID'] : '';
  $folio_node = dpsbridge_helper_pull_content($folio_node_id);
  $article_list = $folio_node['articles'];
  $file_list = array();
  $ds_articles = array();
  $offset = 1;
  // If given landscape and portrait images, generate the cover page.
  if ($folio_node['landscape'] != '' || $folio_node['portrait'] != '') {
    // Generate the cover if the toggle is set to auto-generate the cover.
    if ($folio_node['autoToggle'] == 'Generate Cover' || $folio_node['autoToggle'] == 'Generate Both') {
      array_push($file_list, 'Cover');
      // Calls helper to generate HTML cover article folder.
      dpsbridge_helper_generate_html(
        array(
          'title'  => 'Cover',
          'author' => 'Generated',
          'desc'   => 'Cover',
          'kicker' => $folio_node['pubCSS'],
          'tags'   => '',
          'cover'  => TRUE),
        $folio_node,
        FALSE
      );
      $offset++;
    }
  }
  // Append the ToC if the toggle is set to auto-generate the ToC.
  if ($folio_node['autoToggle'] == 'Generate ToC' || $folio_node['autoToggle'] == 'Generate Both') {
    array_push($file_list, 'Table of Contents');
  }
  // Generate the individual HTML Articles.
  for ($n = 0; $n < count($article_list); $n++) {
    // If not from Drupal, don't generate HTML articles and .folio files.
    if ($article_list[$n]['target_id'] == $folio_node_id) {
      array_push($file_list, '');
      continue;
    }
    $article_node  = dpsbridge_helper_pull_node($article_list[$n]['target_id']);
    // Calls helper to generate HTML article folder.
    dpsbridge_helper_generate_html($article_node, $folio_node, $folio_node['isAds'][$n]);
    array_push($file_list, $article_node['title']);
    $ds_articles[$article_node['node']->nid] = node_view($article_node['node'], 'dps_toc');
  }
  // Generate the ToC if the toggle is set to auto-generate the ToC.
  if ($folio_node['autoToggle'] == 'Generate ToC' || $folio_node['autoToggle'] == 'Generate Both') {
    // Calls helper to generate HTML ToC folder.
    dpsbridge_helper_generate_html(
      array(
        'title'  => 'Table of Contents',
        'author' => 'Generated',
        'desc'   => 'Table of Contents',
        'kicker' => $folio_node['pubCSS'],
        'tags'   => ''),
      $folio_node,
      FALSE,
      $file_list,
      $ds_articles
    );
  }
  drupal_json_output($file_list);
  drupal_exit();
}

/**
 * Create HTML Articles from the selected article within the given folio node.
 */
function dpsbridge_folio_generate_selected_html() {
  // @param string $folio_node_id ....folio node ID.
  // @param string $article_node_id ..article node ID
  $folio_node_id   = isset($_POST['folioNodeID']) ? $_POST['folioNodeID'] : '6';
  $article_node_id = isset($_POST['articleNodeID']) ? explode(',', $_POST['articleNodeID']) : explode(',', '4,5');
  $message       = array('message' => 'ok');
  if (!$folio_node_id || !$article_node_id) {
    $message['message'] = '[Error] Missing the folio node ID and/or article node ID!';
  }
  else {
    // Stores the generated file names, used to delete later.
    $filenames = array();
    // Calls helper to pull folio node metadata.
    $folio_node = dpsbridge_helper_pull_content($folio_node_id);
    // Get local path.
    $current_dir = variable_get('file_public_path', conf_path() . '/files') . '/dpsbridge';
    // Loops through each article node ID.
    for ($i = 0; $i < count($article_node_id); $i++) {
      if ($article_node_id[$i] == '') {
        continue;
      }
      // Calls helper to pull article node metadata.
      $article_node = dpsbridge_helper_pull_node($article_node_id[$i]);
      // Calls helper to generate HTML article folder.
      dpsbridge_helper_generate_html($article_node, $folio_node, $folio_node['isAds']);
      // Calls helper to format the article title.
      $filename = dpsbridge_helper_format_title($article_node['title']);
      // Stores the file name.
      $filenames[] = $filename;
    }
    // Returns the path to the generated html stack .zip file.
    $message['filename'] = 'html_stacks';
    $message['destination'] = $current_dir . '/folio/html_stacks.zip';
    // Zip up all generated HTML article .zip files via Linux built-in zipper.
    $zipper  = "cd " . $current_dir . " && zip -r folio/html_stacks.zip html/*";
    exec($zipper);
    // Delete the generated HTML article folders.
    for ($n = 0; $n < count($filenames); $n++) {
      dpsbridge_helper_rrmdir($current_dir . '/html/' . $filenames[$n]);
    }
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Download the file and delete it from the server.
 *
 * Given the file name and the server path to the selected file.
 */
function dpsbridge_folio_download_selected() {
  // @param $filename .....name of the selected file.
  // @param $destination ..path to the selected file.
  // @param $toggle .......trigger to delete the selected file.
  $filename = isset($_POST['filename']) ? $_POST['filename'] : '';
  $destination = isset($_POST['destination']) ? $_POST['destination'] : '';
  $toggle = isset($_POST['toggle']) ? $_POST['toggle'] : '';
  $message = 'ok';
  if (!$filename || !$destination) {
    $message['message'] = '[Error] Missing the folio node ID and/or article node ID!';
  }
  else {
    // If the zip file was successfully created.
    if (file_exists($destination)) {
      // Include necessary headers for download (mainly for I.E.).
      header("Pragma :  public");
      header("Expires :  0");
      header("Cache-Control :  must-revalidate, post-check=0, pre-check=0");
      header("Cache-Control :  private", FALSE);
      header("Content-Description :  File Transfer");
      header("Content-type :  application/zip");
      header("Content-Disposition :  attachment; filename=\"" . $filename . ".zip\"");
      header("Content-Transfer-Encoding :  binary");
      header("Content-Length :  " . filesize($destination));
      ob_clean();
      flush();
      readfile($destination);
      // Delete the file from server.
      if ($toggle == '1') {
        unlink($destination);
      }
    }
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Pull the folio metadata and account associated from the given folio node ID.
 */
function dpsbridge_folio_pull_accounts() {
  // @param string $folio_node_id ..folio node ID.
  // @return array containing folio metadata and Folio Producer Account info.
  $folio_node_id = isset($_POST['folioNodeID']) ? $_POST['folioNodeID'] : '';
  $folio_node = node_load($folio_node_id);
  $account = $folio_node->field_folio_producer_accounts[LANGUAGE_NONE][0]['value'];
  $container = array();
  switch ($account) {
    case 'amazon':
      $user_id = '341'; $type = 'Amazon';
      break;

    case 'android':
      $user_id = '342'; $type = 'Android';
      break;

    case 'apple':
    default:
      $user_id = '343'; $type = 'Apple';
      break;
  }
  $user = user_load($user_id);
  // If any of the user info are missing.
  if (!$user->name || !$user->mail || !$user->signature || !$user->signature_format) {
    $container['message'] = '[Error] Adobe ID, Adobe Password, Adobe API key, and/or Adobe secret are missing or incorrect!';
  }
  // Load folio metadata and account metadata if user info are available.
  else {
    $container['message'] = 'ok';
    $container['account']['type'] = $type;
    $container['account']['adobeID'] = $user->name;
    $container['account']['password'] = $user->mail;
    $container['account']['apiKey'] = $user->signature;
    $container['account']['apiSecret'] = $user->signature_format;
    $lang = $folio_node->language;
    $container['folioMeta']['folioNodeID'] = $folio_node_id;
    $container['folioMeta']['folioName'] = $folio_node->title;
    $container['folioMeta']['productID'] = $folio_node->field_folio_product_id[$lang][0]['value'];
    $container['folioMeta']['magTitle'] = $folio_node->field_folio_publication_name[$lang][0]['value'];
    $container['folioMeta']['folioNum'] = $folio_node->field_folio_number[$lang][0]['value'];
    $container['folioMeta']['folioDesc'] = $folio_node->field_folio_description[$lang][0]['value'];
    $container['folioMeta']['pubDate'] = $folio_node->field_folio_published_date[$lang][0]['value'];
    $container['folioMeta']['alienated'] = explode(',', $folio_node->field_folio_producer_article_id[$lang][0]['value']);
    $container['folioMeta']['dimension'] = $folio_node->field_folio_dimension[$lang][0]['value'];
    $container['folioMeta']['orientation'] = $folio_node->field_folio_orientation[$lang][0]['value'];
    $container['folioMeta']['viewer'] = $folio_node->field_folio_viewer_version[$lang][0]['value'];
    $container['folioMeta']['filter'] = $folio_node->field_folio_library_filter[$lang][0]['value'];
    $container['folioMeta']['status'] = $folio_node->field_folio_status[$lang][0]['value'];
    $container['folioMeta']['stylesheet'] = $folio_node->field_folio_publication_css[$lang][0]['value'];
    $container['folioMeta']['landscape'] = $folio_node->field_folio_landscape_url[$lang][0]['value'];
    $container['folioMeta']['portrait'] = $folio_node->field_folio_portrait_url[$lang][0]['value'];
  }
  drupal_json_output($container);
  drupal_exit();
}

/**
 * Pull the Article node fields from the given Article node ID.
 */
function dpsbridge_folio_pull_article() {
  // @param string $node_id ..Article node ID.
  // @return array containing the article metadata.
  $node_id = isset($_POST['nodeID']) ? $_POST['nodeID'] : '';
  // Call helper method to pull article metadata associated with the article ID.
  $container = dpsbridge_helper_pull_article($node_id);
  drupal_json_output($container);
  drupal_exit();
}

/**
 * Pull the folio node fields from the given folio node ID.
 */
function dpsbridge_folio_pull_content() {
  // @param string $node_id ..folio node ID.
  // @return array containing the folio metadata.
  $node_id    = isset($_POST['nodeID']) ? $_POST['nodeID'] : '';
  $toggle    = isset($_POST['toggle']) ? $_POST['toggle'] : '';
  // Call helper method to pull folio metadata associated with the folio ID.
  $container = dpsbridge_helper_pull_content($node_id, $toggle);
  drupal_json_output($container);
  drupal_exit();
}

/**
 * Update the targeted folio node in the database.
 *
 * Contains Folio Producer's folio metadata.
 */
function dpsbridge_folio_update() {
  // @param string $fid ........folio node ID
  // @param string $fdesc ......folio description
  // @param string $fname ......folio name
  // @param string $fnumber ....folio number
  // @param string $fversion ...folio version
  // @param string $pid ........folio publication ID
  // @param string $pdate ......folio publication date
  // @param string $pname ......folio publication name
  // @param string $pubcss .....folio publication stylesheet
  // @param string $toccss .....folio table of contents stylesheet
  // @param array  $articles ...articles within the folio node
  // @param array  $is_ads ......articles if add selector, matches $articles
  // @param string $libfilter ..folio filter
  $fid = isset($_POST['fid']) ? $_POST['fid'] : '';
  $fdesc = isset($_POST['fdesc']) ? $_POST['fdesc'] : '';
  $fname = isset($_POST['fname']) ? $_POST['fname'] : '';
  $fnumber = isset($_POST['fnumber']) ? $_POST['fnumber'] : '';
  $fversion = isset($_POST['fversion']) ? $_POST['fversion'] : '';
  $pdate = isset($_POST['pdate']) ? $_POST['pdate'] : '';
  $pname = isset($_POST['pname']) ? $_POST['pname'] : '';
  $pubcss = isset($_POST['pubcss']) ? $_POST['pubcss'] : '';
  // Unused variable $toccss = isset($_POST['toccss']) ? $_POST['toccss'] : '';.
  $accounts = isset($_POST['accounts']) ? $_POST['accounts'] : '';
  $articles = isset($_POST['articles']) ? $_POST['articles'] : '';
  $dimension = isset($_POST['dimension']) ? $_POST['dimension'] : ',';
  $orientation = isset($_POST['orientation']) ? $_POST['orientation'] : ',';
  $auto_toggle = isset($_POST['autoToggle']) ? $_POST['autoToggle'] : ',';
  $is_ads = isset($_POST['isads']) ? $_POST['isads'] : '';
  $filter = isset($_POST['filter']) ? $_POST['filter'] : '';
  $alienated = "";
  $message = 'ok';
  // If any of the above POST requests are not met.
  if (!$fid || !$fname || !$fnumber || !$pdate || !$pname || !$pubcss || !$accounts || !$articles) {
    $message = '[Error] Missing folio node ID, folio name, publication name, folio number, publication date, publication stylesheet, ToC stylesheet, target dimension, or list of articles!';
  }
  else {
    $node = node_load($fid);
    $lang = $node->language;
    $node->title = $fname;
    $node->field_folio_publication_name[$lang][0]['value'] = $pname;
    $node->field_folio_number[$lang][0]['value'] = $fnumber;
    $node->field_folio_published_date[$lang][0]['value'] = $pdate;
    $node->field_folio_description[$lang][0]['value'] = $fdesc;
    $node->field_folio_viewer_version[$lang][0]['value'] = $fversion;
    $node->field_folio_producer_accounts[$lang][0]['value'] = $accounts;
    $node->field_folio_publication_css[$lang][0]['value'] = $pubcss;
    $node->field_folio_toc_layout[$lang][0]['value'] = $pubcss;
    $node->field_folio_dimension[$lang][0]['value'] = $dimension;
    $node->field_folio_orientation[$lang][0]['value'] = $orientation;
    $node->field_folio_auto_generate[$lang][0]['value'] = $auto_toggle;
    $node->field_folio_ads_filter[$lang][0]['value'] = $is_ads;
    $node->field_folio_library_filter[$lang][0]['value'] = $filter;
    // Updates the order of the existing article(s) for the targeted folio.
    $articles = explode(',', $articles);
    $num_updated = 0;
    // Replace the existing article ID with the new article ID.
    for ($i = 0; $i < count($articles); $i++) {
      if ($articles[$i] == '') {
        continue;
      }
      elseif (strlen($articles[$i]) > 10) {
        $node->field_folio_reference[$lang][$i]['target_id'] = $fid;
        $alienated .= $articles[$i] . ",";
      }
      else {
        $node->field_folio_reference[$lang][$i]['target_id'] = $articles[$i];
      }
      $num_updated++;
    }
    $node->field_folio_producer_article_id[$lang][0]['value'] = $alienated;
    // Remove any extra article ID.
    if ($num_updated == 0) {
      unset($node->field_folio_reference[$lang][0]);
    }
    else {
      for ($n = $num_updated; $n <= count($node->field_folio_reference[$lang]); $n++) {
        unset($node->field_folio_reference[$lang][$n]);
      }
    }
    node_save_action($node);
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Stores the folio ID (created in Folio Producer) in folio node (Drupal node).
 */
function dpsbridge_folio_update_status() {
  // @param string $folio_node_id ..folio node ID from Drupal
  // @param string $folio_id ......folio ID from the Folio Producer
  $folio_node_id = isset($_POST['folioNodeID']) ? $_POST['folioNodeID'] : '';
  $folio_id     = isset($_POST['folioID']) ? $_POST['folioID'] : '';
  $message     = 'ok';
  // If any of the above POST request are not met.
  if (!$folio_id || !$folio_node_id) {
    $message = '[Error] Missing folio node ID and/or folio ID!';
  }
  else {
    $folio_node = node_load($folio_node_id);
    $folio_node->field_folio_product_id[LANGUAGE_NONE][0]['value'] = $folio_id;
    $folio_node->field_folio_status[LANGUAGE_NONE][0]['value'] = 'Uploaded';
    node_save($folio_node);
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Given the folio node ID.
 *
 * Update the timestamp for when the folio was last uploaded to Folio Producer,
 * Update the sync status to 'In Sync'.
 * Used for checking if local Drupal articles are in sync with Folio Producer.
 */
function dpsbridge_folio_update_timestamp() {
  $folio_node_id = isset($_POST['folioNodeID']) ? $_POST['folioNodeID'] : '';
  $message     = 'ok';
  // If any of the above POST request are not met.
  if (!$folio_node_id) {
    $message = '[Error] Missing folio node ID!';
  }
  else {
    $folio_node = node_load($folio_node_id);
    $folio_node->field_folio_producer_timestamp[LANGUAGE_NONE][0]['value'] = date('Y-m-d\TH:i:s');
    $folio_node->field_folio_sync_status[LANGUAGE_NONE][0]['value'] = 'In Sync';
    node_save($folio_node);
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Store the given landscape or portrait image file.
 *
 * Contains Folio Producer's folio metadata.
 */
function dpsbridge_img_upload() {
  // @param string $fid ........folio node ID
  // @param string $fname ......folio name
  // @param string $landscape ..landscape image path
  // @param string $portrait ...portrait image path
  $fid       = isset($_POST['fid']) ? $_POST['fid'] : '';
  $fname     = isset($_POST['fname']) ? $_POST['fname'] : '';
  $landscape = isset($_FILES['landscape']) ? $_FILES['landscape'] : '';
  $portrait  = isset($_FILES['portrait']) ? $_FILES['portrait'] : '';
  $message   = 'ok';
  if (!$fid || !$fname) {
    $message = '[Error] Missing folio node ID, folio name, or toggle';
  }
  else {
    $node = node_load($fid);
    $landscape_url = ''; $portrait_url = '';
    if ($landscape && !$landscape['error']) {
      $landscape_fn  = $landscape['name'];
      $landscape_url = $landscape['tmp_name'];
      $landscape_path = drupal_get_path('module', 'dpsbridge') . '/images/landscape/' . dpsbridge_helper_format_title($fname) . '_' . $landscape_fn;
      /* $landscapeFake = '/sites/all/modules/dpsbridge/images/landscape/'.dpsbridge_helper_format_title($fname).'_'.$landscape_fn;*/
      move_uploaded_file($landscape_url, $landscape_path);
      $node->field_folio_landscape_url[LANGUAGE_NONE][0]['value'] = $landscape_path;
    }
    if ($portrait && !$portrait['error']) {
      $portrait_fn  = $portrait['name'];
      $portrait_url = $portrait['tmp_name'];
      $portrait_path = drupal_get_path('module', 'dpsbridge') . '/images/portrait/' . dpsbridge_helper_format_title($fname) . '_' . $portrait_fn;
      /* $portraitFake = '/sites/all/modules/dpsbridge/images/portrait/'.dpsbridge_helper_format_title($fname).'_'.$portrait_fn;*/
      move_uploaded_file($portrait_url, $portrait_path);
      $node->field_folio_portrait_url[LANGUAGE_NONE][0]['value'] = $portrait_path;
    }
    node_save_action($node);
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Read the available local stylesheets, located within /dpsbridge/styles.
 */
function dpsbridge_stylesheet_reader() {
  // @return array containing the name of the local stylesheets.
  $stylesheets = array();
  $styles_directory = variable_get('file_public_path', conf_path() . '/files') . '/dpsbridge' . '/styles/';
  $directory = new DirectoryIterator($styles_directory);
  foreach ($directory as $file) {
    if (!$file->isDot() && $file->getFilename() !== '.DS_Store' && $file->getFilename() !== 'HTMLResources') {
      array_push($stylesheets, $file->getFilename());
    }
  }
  drupal_json_output($stylesheets);
  drupal_exit();
}

/**
 * Delete targeted stylesheet from local dir, located within /dpsbridge/styles.
 */
function dpsbridge_stylesheet_delete() {
  // @param string filename ..the name of the local stylesheet.
  $filename = isset($_POST['filename']) ? $_POST['filename'] : '';
  $message  = 'ok';
  if (!$filename) {
    $message = '[Error] Missing file name!';
  }
  elseif ($filename == 'Bootstrap' || $filename == 'Foundation') {
    $message = '[Denied] Cannot delete the stocked Bootstrap or Foundation stylesheet!';
  }
  else {
    $directory = variable_get('file_public_path', conf_path() . '/files') . '/dpsbridge' . '/styles/';
    dpsbridge_helper_rrmdir($directory . $filename);
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Upload targeted stylesheet from local dir, located within /dpsbridge/styles.
 */
function dpsbridge_stylesheet_upload() {
  // @param string filename ....the name of the uploaded stylesheet
  // @param string derivative ..the framework that the stylesheet is based off
  // of (Foundation or Bootstrap)
  // @param file   zipfile .....the url to the uploaded zip file (containing
  // the stylesheet)
  $filename   = isset($_POST['filename']) ? dpsbridge_helper_format_title($_POST['filename'], '_') : '';
  $derivative = isset($_POST['derivative']) ? $_POST['derivative'] : '';
  $zipfile    = isset($_FILES['zipfile']) ? $_FILES['zipfile'] : '';
  $message    = 'ok-';
  if (!$filename || !$derivative || !$zipfile || $zipfile['error']) {
    $message = '[Error]-Missing file name or targeted derivative or zip file to upload!';
  }
  elseif ($filename == 'Bootstrap' || $filename == 'Foundation') {
    $message = '[Denied]-Cannot override the stocked Bootstrap or Foundation stylesheet!';
  }
  else {
    $directory = variable_get('file_public_path', conf_path() . '/files') . '/dpsbridge' . '/styles/' . $derivative . '-' . $filename;
    mkdir($directory);
    $destination = $directory . '/HTMLResources.zip';
    move_uploaded_file($zipfile['tmp_name'], $destination);
    $message .= $filename;
  }
  drupal_json_output($message);
  drupal_exit();
}

/**
 * Redirects the user to the ACCESS DENIED page.
 */
function dpsbridge_views_access_denied() {
  drupal_access_denied();
  drupal_exit();
}

/**
 * Implements hook_node_info().
 */
function dpsbridge_node_info() {
  return array(
    'folios' => array(
      'name' => t('Folios'),
      'base' => 'folios',
      'description' => t('folio node containing metadata for Folio Producer.'),
      'has_title' => TRUE,
      'title_label' => t('Folios'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function dpsbridge_permission() {
  return array(
    'administer dpsbridge' => array(
      'title' => t('Administer DPS Bridge'),
      'description' => t('Allow users to add and edit Folio Producer credentials.'),
    ),
    'folio_article_permission' => array(
      'title' => t('Folio Article Selection View'),
      'description' => t('Allow users to add articles to a folio.'),
    ),
    'manage dpsbridge folio' => array(
      'title' => t('Folio Management View'),
      'description' => t('Allow users to edit and upload folios.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dpsbridge_theme() {
  $path = drupal_get_path('module', 'dpsbridge');
  return array(
    'dpsbridge_bootstrap_cover' => array(
      'variables' => array(
        'publication' => NULL,
        'landscape' => NULL,
        'portrait' => NULL,
        'directory' => NULL,
      ),
      'template' => 'dpsbridge-bootstrap-cover',
      'path' => $path . '/theme',
    ),
    'dpsbridge_bootstrap_toc' => array(
      'variables' => array(
        'publication' => NULL,
        'ads_list' => NULL,
        'article_names' => NULL,
        'ds_articles' => NULL,
      ),
      'template' => 'dpsbridge-bootstrap-toc',
      'path' => $path . '/theme',
    ),
    'dpsbridge_bootstrap' => array(
      'variables' => array(
        'ds_content' => NULL,
        'publication' => NULL,
        'kicker' => NULL,
        'title' => NULL,
        'author' => NULL,
        'images' => NULL,
        'filename' => NULL,
        'videos' => NULL,
        'paragraphs' => NULL,
      ),
      'template' => 'dpsbridge-bootstrap',
      'path' => $path . '/theme',
    ),
    'dpsbridge_foundation_cover' => array(
      'variables' => array(
        'publication' => NULL,
        'landscape' => NULL,
        'portrait' => NULL,
        'directory' => NULL,
      ),
      'template' => 'dpsbridge-foundation-cover',
      'path' => $path . '/theme',
    ),
    'dpsbridge_foundation_toc' => array(
      'variables' => array(
        'publication' => NULL,
        'ads_list' => NULL,
        'article_names' => NULL,
        'ds_articles' => NULL,
      ),
      'template' => 'dpsbridge-foundation-toc',
      'path' => $path . '/theme',
    ),
    'dpsbridge_foundation' => array(
      'variables' => array(
        'ds_content' => NULL,
        'publication' => NULL,
        'kicker' => NULL,
        'title' => NULL,
        'author' => NULL,
        'images' => NULL,
        'filename' => NULL,
        'videos' => NULL,
        'paragraphs' => NULL,
      ),
      'template' => 'dpsbridge-foundation',
      'path' => $path . '/theme',
    ),
    'dpsbridge_date' => array(
      'render element' => 'element',
    ),
    'dpsbridge_fpmanage_page' => array(
      'variables' => array(
        'folio_listing' => NULL,
        'folio_edit_form' => NULL,
        'folio_image_form' => NULL,
      ),
      'template' => 'dpsbridge-view-manage',
      'path' => $path . '/theme',
    ),
    'dpsbridge_edit_existing_folio_form' => array(
      'render element' => 'form',
      'template' => 'dpsbridge-edit-existing-folio',
      'path' => $path . '/theme',
    ),
    'dpsbridge_image_form' => array(
      'render element' => 'form',
      'template' => 'dpsbridge-edit-folio-cover',
      'path' => $path . '/theme',
    ),
    'dpsbridge_credential_page' => array(
      'variables' => array(
        'dpsbridge_config' => NULL,
      ),
      'template' => 'dpsbridge-view-credential',
      'path' => $path . '/theme',
    ),
    'dpsbridge_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'title' => NULL,
        'image_style' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function dpsbridge_field_formatter_info() {
  $formatters = array(
    'dps_image' => array(
      'label' => t('DPS Image'),
      'field types' => array('image'),
      'settings' => array('image_style' => ''),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function dpsbridge_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'dps_image') {
    $image_styles = image_style_options(FALSE, PASS_THROUGH);
    $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
    );
    return $element;
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function dpsbridge_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'dps_image') {
    $summary = array();

    $image_styles = image_style_options(FALSE, PASS_THROUGH);
    // Unset possible 'No defined styles' option.
    unset($image_styles['']);
    // Styles could be lost because of enabled/disabled modules that defines
    // their styles in code.
    if (isset($image_styles[$settings['image_style']])) {
      $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    }
    else {
      $summary[] = t('Original image');
    }

    return implode('<br />', $summary);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function dpsbridge_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'dps_image') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#theme' => 'dpsbridge_image_formatter',
        '#item' => $item,
        '#image_style' => $display['settings']['image_style'],
        '#title' => $entity->title,
      );
    }
  }

  return $element;
}

/**
 * Implements hook_views_api().
 */
function dpsbridge_views_api() {
  return array(
    'api' => 2.0,
  );
}

/**
 * Implements hook_node_update().
 *
 * Upon updating an article,
 *  mark all folios that contain this article as out-of-sync
 */
function dpsbridge_node_update($node) {
  if ($node->type == 'article' && isset($node->field_article_reference)) {
    // Loops through the folio references.
    for ($i = 0; $i < count($node->field_article_reference[LANGUAGE_NONE]); $i++) {
      $folio_node_id = $node->field_article_reference[LANGUAGE_NONE][$i]['target_id'];
      $folio_node = node_load($folio_node_id);
      $folio_node->field_folio_sync_status[LANGUAGE_NONE][0]['value'] = "Not Sync";
      node_save_action($folio_node);
    }
  }
}

/**
 * Implements hook_node_delete().
 *
 * Upon deleting an article,
 *  cascade its folio references.
 *
 * Upon deleting an folio,
 *  cascade its article references.
 */
function dpsbridge_node_delete($node) {
  if ($node->type == 'article' && isset($node->field_article_reference[LANGUAGE_NONE][0]['target_id'])) {
    // Loops through the article-to-folio references.
    for ($i = 0; $i < count($node->field_article_reference[LANGUAGE_NONE]); $i++) {
      $found = FALSE;
      $folio_node_id = $node->field_article_reference[LANGUAGE_NONE][$i]['target_id'];
      $folio_node = node_load($folio_node_id);
      $folio_reference_len = count($folio_node->field_folio_reference[LANGUAGE_NONE]);
      // Loops through the folio-to-article references.
      for ($n = 0; $n < $folio_reference_len; $n++) {
        if ($folio_node->field_folio_reference[LANGUAGE_NONE][$n]['target_id'] == $node->nid) {
          // Shift the remaining items,
          // in folio-to-article reference list up one level.
          for ($p = $n + 1; $p < $folio_reference_len; $p++) {
            $folio_node->field_folio_reference[LANGUAGE_NONE][$p - 1]['target_id']
              = $folio_node->field_folio_reference[LANGUAGE_NONE][$p]['target_id'];
          }
          $found = TRUE;
          break;
        }
      }
      // If the targeted reference was found,
      // deletes the last item in the folio-to-article reference's list.
      if ($found) {
        unset($folio_node->field_folio_reference[LANGUAGE_NONE][$folio_reference_len - 1]);
        node_save_action($folio_node);
      }
    }
  }
  elseif ($node->type == 'folios' && isset($node->field_folio_reference[LANGUAGE_NONE][0]['target_id'])) {
    // Loops through the folio-to-article references.
    for ($i = 0; $i < count($node->field_folio_reference[LANGUAGE_NONE]); $i++) {
      $found = FALSE;
      $article_node_id = $node->field_folio_reference[LANGUAGE_NONE][$i]['target_id'];
      $article_node = node_load($article_node_id);
      $article_reference_len = count($article_node->field_article_reference[LANGUAGE_NONE]);
      // Loops through the article-to-folio references.
      for ($n = 0; $n < $article_reference_len; $n++) {
        if ($article_node->field_article_reference[LANGUAGE_NONE][$n]['target_id'] == $node->nid) {
          // Shift the remaining items,
          // in article-to-folio reference list up one level.
          for ($p = $n + 1; $p < $article_reference_len; $p++) {
            $article_node->field_article_reference[LANGUAGE_NONE][$p - 1]['target_id']
              = $article_node->field_article_reference[LANGUAGE_NONE][$p]['target_id'];
          }
          $found = TRUE;
          break;
        }
      }
      // If the targeted reference was found,
      // deletes the last item in the article-to-folio reference's list.
      if ($found) {
        unset($article_node->field_article_reference[LANGUAGE_NONE][$article_reference_len - 1]);
        node_save_action($article_node);
      }
    }
  }
}

/**
 * Theme function for number field in form.
 */
function theme_dpsbridge_date($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'date';
  element_set_attributes($element, array(
    'id',
    'name',
    'value',
    'size',
    'maxlength'));
  _form_set_class($element, array('form-text'));

  $extra = '';
  if ($element['#autocomplete_path'] && drupal_valid_path($element['#autocomplete_path'])) {
    drupal_add_library('system', 'drupal.autocomplete');
    $element['#attributes']['class'][] = 'form-autocomplete';

    $attributes = array();
    $attributes['type'] = 'hidden';
    $attributes['id'] = $element['#attributes']['id'] . '-autocomplete';
    $attributes['value'] = url($element['#autocomplete_path'], array('absolute' => TRUE));
    $attributes['disabled'] = 'disabled';
    $attributes['class'][] = 'autocomplete';
    $extra = '<input' . drupal_attributes($attributes) . ' />';
  }

  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';

  return $output . $extra;
}

/**
 * Returns HTML for an image field formatter.
 */
function theme_dpsbridge_image_formatter($variables) {
  $item = $variables['item'];
  $image = array(
    'path' => $item['uri'],
  );

  if (array_key_exists('alt', $item)) {
    $image['alt'] = $item['alt'];
  }

  if (isset($item['attributes'])) {
    $image['attributes'] = $item['attributes'];
  }

  if (isset($item['width']) && isset($item['height'])) {
    $image['width'] = $item['width'];
    $image['height'] = $item['height'];
  }

  // Do not output an empty 'title' attribute.
  if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  $title = $variables['title'];
  $article_folder = dpsbridge_helper_format_title($title);
  $parsed = explode('/', $image['path']);
  $filename = $parsed[count($parsed) - 1];

  if ($variables['image_style']) {
    // Determine the dimensions of the styled image.
    $dimensions = array(
      'width' => $image['width'],
      'height' => $image['height'],
    );

    image_style_transform_dimensions($variables['image_style'], $dimensions);

    $variables['width'] = $dimensions['width'];
    $variables['height'] = $dimensions['height'];

    // Determine the URL for the styled image.
    $path = image_style_url($variables['image_style'], $image['path']);
    dpsbridge_helper_save_img($path, $article_folder . '/' . $filename);
  }
  else {
    $path = file_create_url($image['path']);
    dpsbridge_helper_save_img($path, $article_folder . '/' . $filename);
  }

  $output = '<img src="' . $filename . '" />';

  return $output;
}

/**
 * Create DPSBridge directory.
 */
function dpsbridge_create_diretories() {
  $dir = file_default_scheme() . '://dpsbridge';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dir = file_default_scheme() . '://dpsbridge/html';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dir = file_default_scheme() . '://dpsbridge/folio';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dir = file_default_scheme() . '://dpsbridge/styles';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dir = file_default_scheme() . '://dpsbridge/styles/Bootstrap';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dir = file_default_scheme() . '://dpsbridge/styles/Foundation';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dir = file_default_scheme() . '://dpsbridge/images';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  // Copy precreated html resource files to files.
  $source = drupal_get_path('module', 'dpsbridge') . '/styles/Bootstrap/HTMLResources.zip';
  $destination = file_default_scheme() . '://dpsbridge/styles/Bootstrap/HTMLResources.zip';
  file_unmanaged_copy($source, $destination);

  $source = drupal_get_path('module', 'dpsbridge') . '/styles/Foundation/HTMLResources.zip';
  $destination = file_default_scheme() . '://dpsbridge/styles/Foundation/HTMLResources.zip';
  file_unmanaged_copy($source, $destination);
}
